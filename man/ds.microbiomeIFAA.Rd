% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.microbiomeIFAA.R
\name{ds.microbiomeIFAA}
\alias{ds.microbiomeIFAA}
\title{Computes the association of microbiome data with covariates}
\usage{
ds.microbiomeIFAA(
  SumExp = NULL,
  microbVar = "all",
  refTaxa = NULL,
  testCov = NULL,
  ctrlCov = NULL,
  sampleIDname = NULL,
  testMany = TRUE,
  ctrlMany = FALSE,
  adjust_method = "BY",
  fdrRate = 0.05,
  paraJobs = NULL,
  standardize = FALSE,
  taxDropThresh = 0,
  verbose = TRUE,
  type = c("split", "pooled", "both"),
  datasources = NULL
)
}
\arguments{
\item{SumExp}{is a string character describing the SummarizedExperiment object}

\item{microbVar}{This takes a single or vector of microbiome variable names (e.g., taxa, OTU and ASV names) of interest. Default is "all" meaning all microbiome variables will be analyzed. If a subset of microbiome variables is specified, the output will only contain the specified variables, and p-value adjustment for multiple testing will only be applied to the subset.}

\item{refTaxa}{vector of microbiome taxa or OTU or ASV names. Will be denominator(s) to microbVar.}

\item{testCov}{is a string character of covariates to be examined along the microbiome variables (can also be a vector of covariates).}

\item{ctrlCov}{is a string character for the covariates that will be adjusted in the model (can also be a vector of confounders).}

\item{sampleIDname}{is a string character for the sample ID variable.}

\item{testMany}{is a logical. If 'TRUE' and 'covariates' are set to NULL, then all variables in the 'covariates' will be used.}

\item{ctrlMany}{is a logical. If 'TRUE' and 'confounders' are set to NULL, then all variables except the 'coviariates' will be used as confounders.}

\item{adjust_method}{The adjusting method for p value adjustment. Default is "BY" for dependent FDR adjustment. It can take any adjustment method for the p.adjust function in R.}

\item{fdrRate}{The false discovery rate for identifying taxa/OTU/ASV associated with 'covariates'.}

\item{paraJobs}{If 'sequentialRun' is FALSE, this specifies the number of parallel jobs that will be registered to run the algoithm. If specified as NULL, it will automatically detect the cores to decide the number of parallel jobs.}

\item{standardize}{is a logical. If 'TRUE', the design matrix for X will be standardized in the analyses and the results. Default is FALSE.}

\item{taxDropThresh}{The threshold of number of non-zero sequencing reads for each taxon to be dropped from the analysis. Default is 0 which means that taxon without any sequencing reads will be dropped from the analysis.}

\item{verbose}{Whether the process message is printed out to the console. Default is TRUE.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login}
}
\value{
\code{ds.microbiomeIFAA} returns the association of the microbiome data with the covariates
}
\description{
This function is similar to the native R function from the IFAA package
}
\details{
The function calls the server-side function \code{microbiomeIFAADS} that computes the
association analysis from a SummarizedExperiment object. SummarizedExperiment objects can be computed using the \code{ds.summarizedExperiment} function.
}
\examples{
\dontrun{

  # connecting to the Opal servers

  require('DSI')
  require('DSOpal')
  require('dsBaseClient')
  require('dsIntestinalMicrobiomicsClient')

  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1",
                 url = "http://192.168.56.100:8080/",
                 user = "administrator", password = "datashield_test&",
                 table = "MicrobSIM.MicrobSIM1", driver = "OpalDriver")
  builder$append(server = "study2",
                 url = "http://192.168.56.100:8080/",
                 user = "administrator", password = "datashield_test&",
                 table = "MicrobSIM.MicrobSIM2", driver = "OpalDriver")
  builder$append(server = "study3",
                 url = "http://192.168.56.100:8080/",
                 user = "administrator", password = "datashield_test&",
                 table = "MicrobSIM.MicrobSIM3", driver = "OpalDriver")
  logindata <- builder$build()

  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D")


  # Create data.frames with microbiome and covariate data of interest

  ds.dataFrame(x = c("D$P_ACTINOBACTERIA",
                     "D$P_BACTEROIDETES",
                     "D$P_FIRMICUTES",
                     "D$P_VERRUCOMICROBIA"),
               newobj = "microbdata",
               stringsAsFactors = FALSE)

  ds.dataFrame(x = c("D$AGE",
                     "D$SEX",
                     "D$WEIGHT",
                     "D$HEIGHT"),
               newobj = "covdata",
               stringsAsFactors = FALSE)


  # Create the summarizedExperiment object on the server-side based on the microbiome and covariate data.frames

  ds.summarizedExperiment(microbiomeData = "microbdata",
                          covariateData = "covdata",
                          newobj = "SumExpT")

  # Calculate the associations of covariates with the microbiome ratios

  results <- ds.microbiomeIFAA(SumExp = "SumExpT",
                               microbVar = "P_BACTEROIDETES",
                               refTaxa = "P_VERRUCOMICROBIA",
                               testCov = "WEIGHT",
                               ctrlCov = c("AGE", "SEX"),
                               adjust_method = "BY",
                               fdrRate = 0.05,
                               type = "both")


  # clear the Datashield R sessions and logout
  datashield.logout(connections)
}

}
\author{
Florian Schwarz for the German Institute of Human Nutrition
}
